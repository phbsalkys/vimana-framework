# -*- coding: utf-8 -*-
#  __ _
#   \/imana 2016
#   [|-ramewørk
#
#
# Author: s4dhu
# Email: <s4dhul4bs[at]prontonmail[dot]ch
# Git: @s4dhulabs
# Mastodon: @s4dhu
# 
# This file is part of Vimana Framework Project.

name: DMT
author: s4dhu <s4dhul4bs[at]prontonmail[dot]ch
brief: Django Misconfiguration Tracker
category: Framework
framework: Django 
info: Tracks and exploits misconfigurations in Django applications
module: siddhis/dmt/dmt.py 
package: Django
type: Tracker
tags:
  - Error
  - Debug
  - Exceptions
  - Misconfiguration 
description: |
  This tool was designed to audit applications running
  with the Django framework. Acts as an input module for
  Vimana to collect base data.  DMT works seamlessly with
  other framework tools such as Jungle, DJunch, which are
  respectively brute force and fuzzing tools. Among the
  various actions taken are: Identification of the state
  of Debug extraction and mapping of application URL
  Patterns. This first step will serve as input to the
  fuzzer process (performed by DJunch) where tests will
  be conducted to handle and map unhandled exceptions,
  extract and identify sensitive information in the leaks,
  implementation failure testing.

  With the same initial DMT input the brute force process
  will be performed on the API authentication endpoints
  (if available) and also on the Django administrative
  interface (if available).

  At the end of the analysis it is possible to query
  the data obtained by DMT, using the commands to
  access contexts, view information about the identified
  exceptions, view the source code leaked by the affected
  modules.

  You can quickly get some help related to the required
  arguments, syntax, examples, and labs with:

  $ vimana guide -m dmt --args/--examples/--labs 

references:
  links:
    - https://www.djangoproject.com/
  cwe:
    - CWE-248 - Uncaught Exception
    - CWE-703 - Improper Check or Handling of Exceptional Conditions
    - CWE-215 - Insertion of Sensitive Information Into Debugging Code
    - CWE-209 - Generation of Error Message Containing Sensitive Information
    - CWE-756 - Missing Custom Error Page
    - CWE-1295 - Debug Messages Revealing Unnecessary Information
guide:
  args: |
    ø----------------------------------------------------------------------ø
    │└┐└│└┘┌┐│└└┘┌┐┘└┘└┐└┘│└┐┘││└┘│-  DMT ARGS  ┐│││││├┤┘│││┤└┘││└┐└┘│┌┌┐└│┐
    ø-----------+----------------------------------------------------------ø
    │ target    └┐                                                         │
    +------------+---------------------------------------------------------+
     --target            Run DMT against a single target
     --target-list       Run DMT against a target list (comma separated)
     --file              Run DMT loading scope from a file
    +-----------+----------------------------------------------------------+
    │ port      └┐                                                         │     
    +------------+---------------------------------------------------------+
     --port              Setting a single port for the target
     --port-list         Setting a port-list (comma separated)
     --port-range        Setting a range of ports for each target
     --ignore-state      Ignore port status checks   
    +-----------+----------------------------------------------------------+
    │ autoload  └┐                                                         │     
    +------------+---------------------------------------------------------+
     --nmap-xml          Load the scope from nmap xml file
     --docker-scope      Load the scope from Docker environment
    +-----------+----------------------------------------------------------+
    │ modes     └┐                                                         │
    +------------+---------------------------------------------------------+
     --extended-scope    Run DMT in sample mode with extended scope
     --exit-on-trigger   Run in default mode exiting on first exception
     --sample            Run DMT in silent sample mode 
    +-----------+----------------------------------------------------------+
    │ options   └┐                                                         │      
    +------------+---------------------------------------------------------+
     --save-session      Save analysis results as a interactive session
     --verbose           Enable verbosity (not enabled in sample mode)
     --debug             Enable debug messages (not enabled in sample mode)
     --auto              Enable auto-confirmation (default on sample mode)
    
     * You can also see some examples with `vimana guide -m DMT -e`              
  examples: |
    ø----------------------------------------------------------------------ø
    ⠞⠓⠊⠎:⠞⠓⠎⠞⠎-⠞⠊⠞⠓~⠊⠎⠞⠓⠊⠎└┐  DMT GUIDE  ⠞⠓⠊⠎.~⠞⠎⠞⠓⠊⠓⠊::::::⠞⠓⠊⠎,⠞⠊.⠞⠓⠊⠎⠞⠓⠊⠎
    ø---------------------└┘-----------------------------------------------ø
    
        Run DMT in (default) analytical mode (all occurrences)
        against a specific target and port, enabling debug mode:

        $ vimana run -m dmt -t djapp1.vmnf.com -p 8000 --debug

    ø----------------------------------------------------------------------ø
    
        Run DMT against a list of targets on a specific port
        with sample mode enabled. This mode will suppress all
        debug or verbose messages focused on triggering just one
        exception. It aims to be fast once we're looking for
        a single sample instead of analytical mode (default),
        which looks for all unique occurrences:
    
        $ vimana run \
           --module dmt \
           --target-list 127.0.0.1, 192.168.1.161 \
           --port 9001 \
           --sample

    ø----------------------------------------------------------------------ø
    
        Creating a case setting DMT against a list of targets and
        ports enabling auto-confirmation, verbose and running the
        case with name 'djapps':

        $ vimana run \
           --module dmt \
           --target-list 127.0.0.1, 192.168.1.161, djapp1.vmnf.com\
           --port-list 8888,9001,8000,5001 \
           --verbose \
           --auto \
           --save-case djapps \
           --exec-case

    ø----------------------------------------------------------------------ø
     
        Run DMT against Django target URL http://mydjlabs.com:9981
        disabling external lookups (like CVE, Tickets, etc)
        and exiting on the first exception caught. If you are
        running a Vimana module without sudo, in some cases, if the
        resource needs to write in disk, for cache http objects,
        for instance, the analysis could fail. With that in mind,
        sometimes it is handy to run the same set of arguments
        adding --disable-cache, but usually, the framework will
        warn you about that. In addition, this dmt command line
        enables debug mode and sets confirmations in some steps
        to Yes.

        $ vimana run \
           --plugin dmt \ 
           --target-url http://mydjlabs.com:9981 \
           --disable-external \
           --exit-on-trigger \
           --disable-cache \
           --debug \
           --auto 

    ø----------------------------------------------------------------------ø

        By default, when the set of instructions contains the
        option --save-case <case_name>, that command line will be
        saved in the form of a vimana case file, enabling easy
        re-execution of the same plugin with the same set of
        instructions. The case file created can also be executed
        at the same time with the option --exec-case as in the
        example above.

        Many options can be used to run the case posteriorly,
        as the examples below:

        * Run the last case created:
        $ vimana run !

        * Run case by id @cf1:
        $ vimana run --case @cf1

        * Run case by name:
        $ vimana run --case djapps

    ø----------------------------------------------------------------------ø
    
        Run DMT setting the siddhi scope as the active targets
        on Docker environment. When --exit-on-trigger is enabled,
        the plugins will look for just one exception as --sample
        does, but debug and verbose could be enabled normally,
        differently from sample mode.

        $ vimana run --module dmt --docker-scope --exit-on-trigger

    ø----------------------------------------------------------------------ø

        Run DMT in debug mode using a file with a list of targets
        in the format <target:port> as scope:

        $ vimana run --module dmt --file scope.txt --debug

  lab_setup: |
    ø----------------------------------------------------------------------ø
    │└┘⠞⠓┌┐│└⠞⠓└┘┌⠞⠓┐┌┘.┌⠞⠓┬┐.└┐┘│ LAB SETUP  ┘└┐│.└┘.┌┐│⠞⠓│┬.│⠞└┘┌┬┐└┐┌.│.│
    ø----------------------------------------------------------------------ø
  
        Even though there are many ways to test DMT, I encourage
        you to set up a test environment using some Django
        open-source projects available on GitHub. Also, you can
        easily find many interesting images on Docker Hub to run
        DMT against it. Check it out: https://hub.docker.com

        If you're running DMT for the first time, I recommend 
        using this purposefully vulnerable Django application 
        provided by nVisium: 
    
        https://github.com/nVisium/django.nV

        You can simply follow the steps bellow to setup a test env
        using django.nV:

        $ git clone https://github.com/nVisium/django.nV.git
        $ export PYTHONPATH="/usr/local/lib/python3.4/site-packages"
        $ virtualenv -p python3 ~/django.nV_venv
        $ source ~/django.nV_venv/bin/activate
        $ cd django.nV
        $ pip install -r requirements.txt
        $ ./reset_db.sh
        $ ./runapp.sh

        In another terminal start DMT with debug and save-session
        enabled:

        $ vimana run \
           --module dmt \
           --target localhost \
           --port 8000 \
           --debug \
           --save-session 

        In case you have not set Vimana using set_env script:

        $ python3 vimana.py run \
           --module dmt \
           --target localhost \
           --port 8000 \
           --debug 

        * args: `vimana guide -m dmt -a`              

